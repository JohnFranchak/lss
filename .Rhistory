panel.background = element_blank(),panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "white"),
axis.ticks.length = unit(.25, "cm"), axis.ticks = element_line(size = 1, lineend = "round"),
legend.key = element_rect(fill = "white"))
# CREATE DATA SET ---------------------------------------------------------------
ds <- read_csv("summary_stats_LSS1.csv", na = "NaN")
ds <- mutate(ds, id = factor(id))
#ds <- filter(ds, id != 212 & id != 203)
ds[ds["id"] == 13, "search_eyex_speed"] <- NA
# POSITION SD MEANS --------------
dsl <-  gather(ds, key = "cond", value = "std", "walk_eyex_std","search_eyex_std","walk_eyey_std","search_eyey_std")
dsl$dim <- factor(ifelse(is.na(str_extract(dsl$cond,"x")),"y","x"))
dsl$task <- factor(ifelse(is.na(str_extract(dsl$cond,"walk")),"search","walk"),levels = c("walk","search"),labels = c("Walk","Search"))
dsl %>% split(.$dim) %>%
map(~ lmer(std ~ task + (1|id),data = .)) %>%
map(anova)
t.test(ds$walk_eyex_std, ds$search_eyex_std, paired = T)
dsl %>% group_by(dim, task) %>% filter(dim == "x") %>%
summarise(stdev = mean(std, na.rm = T), n = n(), se = sd(std, na.rm = T)/sqrt(n), ymin = stdev - se, ymax = stdev + se) %>%
ggplot() +
labs(x = "", y = "Position SD (ยบ)") +
geom_sina(data = filter(dsl, dim == "x"), aes(y = std, x = task, color = task), maxwidth = .5, position = position_dodge(.6), alpha = .5, size = 3) +
geom_errorbar(aes(x = task, group = task,ymin = ymin, ymax = ymax), size =1, width = .3, position = position_dodge(.6)) +
scale_color_manual(values = cbp1[c(7,6)], name = "Task") +
scale_y_continuous(breaks = c(0,10,20,30,40), limits = c(0,40))
ggsave("figures/lss1_position_sd.pdf", units = "in", width = 4, height = 4)
#NO OUTLIERS
dsl %>% group_by(dim, task) %>%
summarise(ym = mean(std, na.rm = T), lower = ym - 3*sd(std, na.rm = T), upper = ym + 3*sd(std, na.rm = T), ymin = min(std, na.rm =T), ymax = max(std, na.rm = T), x = 1) %>%
ggplot(aes(x = interaction(dim, task))) + geom_boxplot(aes(ymin = ymin, lower = lower, middle = ym, upper = upper, ymax = ymax), stat = "identity") +
geom_point(data = dsl, aes(y = std, group = interaction(dim, task)), na.rm = T)
# SPEED MEANS --------------
dsl <-  gather(ds, key = "cond", value = "speed", "walk_eyex_speed","search_eyex_speed","walk_eyey_speed","search_eyey_speed")
dsl$dim <- factor(ifelse(is.na(str_extract(dsl$cond,"x")),"y","x"))
dsl$task <- factor(ifelse(is.na(str_extract(dsl$cond,"walk")),"search","walk"),levels = c("walk","search"),labels = c("Walk","Search"))
res <- lmer(speed ~ task + (1|id),data = dsl)
anova(res)
dsl %>% group_by(dim, task) %>% filter(dim == "x") %>%
summarise(Speed = mean(speed, na.rm = T), n = n(), se = sd(speed, na.rm = T)/sqrt(n), ymin = Speed - se, ymax = Speed + se) %>%
ggplot() +
labs(x = "", y = "Speed (ยบ/s)") +
geom_sina(data = filter(dsl, dim == "x"), aes(y = speed, x = task, color = task), maxwidth = .5, position = position_dodge(.6), alpha = .5, size = 3) +
geom_errorbar(aes(x = task, group = task,ymin = ymin, ymax = ymax), size =1, width = .3, position = position_dodge(.6)) +
scale_color_manual(values = cbp1[c(7,6)], name = "Task") +
scale_y_continuous(breaks = 0:5, limits = c(0,5))
ggsave("figures/lss1_speed.pdf", units = "in", width = 4, height = 4)
#FIND OUTLIERS (Done, excluded at file read above)
dsl %>% group_by(dim, task) %>%
summarise(ym = mean(speed, na.rm = T), lower = ym - 3*sd(speed, na.rm = T), upper = ym + 3*sd(speed, na.rm = T), ymin = min(speed, na.rm =T), ymax = max(speed, na.rm = T), x = 1) %>%
ggplot(aes(x = interaction(dim, task))) + geom_boxplot(aes(ymin = ymin, lower = lower, middle = ym, upper = upper, ymax = ymax), stat = "identity") +
geom_point(data = dsl, aes(y = speed, group = interaction(dim, task)))
# GPS DATA  --------------
#SPEED BY TASK
t.test(ds$walk_path_speed, ds$search_path_speed, paired = T)
cor.test(ds$walk_path_speed, ds$search_path_speed)
describe(ds[,c("walk_path_speed", "search_path_speed")], na.rm = T)
ds %>% gather(key = "task", value = "speed", "walk_path_speed", "search_path_speed") %>%
mutate(task = factor(task, levels = c("walk_path_speed", "search_path_speed"), labels = c("Walk", "Search"))) -> dsl
dsl %>%  group_by(task) %>%
summarise(Speed = mean(speed, na.rm = T), n = n(), se = sd(speed, na.rm = T)/sqrt(n), ymin = Speed - se, ymax = Speed + se) %>%
ggplot() +
geom_sina(data = dsl, aes(y = speed, x = task, color = task), maxwidth = .5, position = position_dodge(.6), alpha = .5, size = 3, na.rm = T) +
geom_errorbar(aes(x = task, ymin = ymin, ymax = ymax), color = "black", size =1, width = .3, position = position_dodge(.6)) +
scale_color_manual(values = cbp1[c(7,6)], name = "Task") +
labs(x = "", y = "Walking speed (m/s)") +
scale_y_continuous(breaks = c(.25, .5, .75, 1, 1.25, 1.5), limits = c(.25, 1.5)) +
theme(legend.position = "none") -> p1
#ggsave("figures/lss1_walking_speed.pdf", units = "in", width = 5, height = 4)
#SPEED SD BY TASK
t.test(ds$walk_path_speed_sd, ds$search_path_speed_sd, paired = T)
cor.test(ds$walk_path_speed_sd, ds$search_path_speed_sd)
describe(ds[,c("walk_path_speed_sd", "search_path_speed_sd")], na.rm = T)
ds %>% gather(key = "task", value = "speed", "walk_path_speed_sd", "search_path_speed_sd") %>%
mutate(task = factor(task, levels = c("walk_path_speed_sd", "search_path_speed_sd"), labels = c("Walk", "Search"))) -> dsl
dsl %>%  group_by(task) %>%
summarise(Speed = mean(speed, na.rm = T), n = n(), se = sd(speed, na.rm = T)/sqrt(n), ymin = Speed - se, ymax = Speed + se) %>%
ggplot() +
geom_sina(data = dsl, aes(y = speed, x = task, color = task), maxwidth = .5, position = position_dodge(.6), alpha = .5, size = 3, na.rm = T) +
geom_errorbar(aes(x = task, ymin = ymin, ymax = ymax), color = "black", size =1, width = .3, position = position_dodge(.6)) +
scale_color_manual(values = cbp1[c(7,6)], name = "Task") +
labs(x = "", y = "Walking speed SD (m/s)") +
scale_y_continuous(breaks = c(0, .25, .5, .75, 1), limits = c(0,1)) +
theme(legend.position = "none") -> p2
#ggsave("figures/lss1_walking_speed_sd.pdf", units = "in", width = 5, height = 4)
#STRAIGHTNESS BY TASK
t.test(ds$walk_straightness, ds$search_straightness, paired = T)
cor.test(ds$walk_straightness, ds$search_straightness)
describe(ds[,c("walk_straightness", "search_straightness")], na.rm = T)
ds %>% gather(key = "task", value = "speed", "walk_straightness", "search_straightness") %>%
mutate(task = factor(task, levels = c("walk_straightness", "search_straightness"), labels = c("Walk", "Search"))) -> dsl
dsl %>%  group_by(task) %>%
summarise(Speed = mean(speed, na.rm = T), n = n(), se = sd(speed, na.rm = T)/sqrt(n), ymin = Speed - se, ymax = Speed + se) %>%
ggplot() +
geom_sina(data = dsl, aes(y = speed, x = task, color = task), maxwidth = .5, position = position_dodge(.6), alpha = .5, size = 3, na.rm = T) +
geom_errorbar(aes(x = task, ymin = ymin, ymax = ymax), color = "black", size =1, width = .3, position = position_dodge(.6)) +
scale_color_manual(values = cbp1[c(7,6)], name = "Task") +
labs(x = "", y = "Straightness ratio") +
scale_y_continuous(breaks = c(0, 2.5, 5, 7.5), limits = c(0,7.5)) +
theme(legend.position = "none") -> p3
#ggsave("figures/lss1_walking_straightness.pdf", units = "in", width = 5, height = 4)
p1 + p2 + p3
ggsave("figures/lss1_walking_stats_composite.pdf", units = "in", width = 9, height = 4)
library(readr)
library(ggplot2)
library(ggmap)
library(dplyr)
register_google(key = "AIzaSyAL4i-C_dr81Q5WTCBv6oklVH3bRXKId1A")
search <- read_csv("Dropbox/Apps/Overleaf/PLM/figures/lss raw/searching_222.csv")
search$lat <- search$`33.973263`
search$long <- search$`-117.32558`
search <- search %>% filter(lat > 33.973973)
walk <- read_csv("Dropbox/Apps/Overleaf/PLM/figures/lss raw/walking_222.csv")
walk$lat <- walk$`33.9720035391`
walk$long <- walk$`-117.327640334`
library(readr)
library(ggplot2)
library(ggmap)
library(dplyr)
register_google(key = "AIzaSyAL4i-C_dr81Q5WTCBv6oklVH3bRXKId1A")
search <- read_csv("Dropbox/Apps/Overleaf/PLM/figures/lss raw/searching_222.csv")
search$lat <- search$`33.973263`
search$long <- search$`-117.32558`
search <- search %>% filter(lat > 33.973973)
walk <- read_csv("Dropbox/Apps/Overleaf/PLM/figures/lss raw/walking_222.csv")
walk$lat <- walk$`33.9720035391`
walk$long <- walk$`-117.327640334`
walk <- read_csv("lss raw/walking_222.csv")
search <- read_csv("searching_222.csv")
walk <- read_csv("/Users/johnfranchak/Documents/GitHub/lss/gps/walking_222.csv")
walk$lat <- walk$`33.9720035391`
walk$long <- walk$`-117.327640334`
search <- read_csv("/Users/johnfranchak/Documents/GitHub/lss/gps/searching_222.csv")
search$lat <- search$`33.973263`
search$long <- search$`-117.32558`
search <- search %>% filter(lat > 33.973973)
ggmap(get_googlemap(center = c(mean(search$long), mean(search$lat)),
color = "bw", scale = 2, zoom = 18,
style = c(feature = "all", element = "labels", visibility = "off")), darken = .1) +
geom_path(aes(x = long, y = lat), data = search)
library(ggmap)
install.packages("ggmap")
library(ggmap)
ggmap(get_googlemap(center = c(mean(search$long), mean(search$lat)),
color = "bw", scale = 2, zoom = 18,
style = c(feature = "all", element = "labels", visibility = "off")), darken = .1) +
geom_path(aes(x = long, y = lat), data = search)
register_google(key = "AIzaSyAL4i-C_dr81Q5WTCBv6oklVH3bRXKId1A")
ggmap(get_googlemap(center = c(mean(search$long), mean(search$lat)),
color = "bw", scale = 2, zoom = 18,
style = c(feature = "all", element = "labels", visibility = "off")), darken = .1) +
geom_path(aes(x = long, y = lat), data = search)
ggmap(get_googlemap(center = c(-117.3262, max(walk$lat)-.0002),
color = "bw", scale = 2, zoom = 18, maptype = "roadmap",
style = c(feature = "all", element = "labels", visibility = "off")), darken = 0) +
geom_path(aes(x = long, y = lat), data = walk, size = 1) +
geom_path(aes(x = long, y = lat), data = search, size = 1)
?get_googlemap
ggmap(get_googlemap(center = c(-117.3262, max(walk$lat)-.0002),
color = "color", scale = 2, zoom = 18, maptype = "roadmap",
style = c(feature = "all", element = "labels", visibility = "off")), darken = 0) +
geom_path(aes(x = long, y = lat), data = walk, size = 1) +
geom_path(aes(x = long, y = lat), data = search, size = 1)
?geom_path
ggmap(get_googlemap(center = c(-117.3262, max(walk$lat)-.0002),
color = "color", scale = 2, zoom = 18, maptype = "roadmap",
style = c(feature = "all", element = "labels", visibility = "off")), darken = 0) +
geom_path(aes(x = long, y = lat), data = walk, size = 1, color = "#D55E00") +
geom_path(aes(x = long, y = lat), data = search, size = 1)
ggmap(get_googlemap(center = c(-117.3262, max(walk$lat)-.0002),
color = "color", scale = 2, zoom = 18, maptype = "roadmap",
style = c(feature = "all", element = "labels", visibility = "off")), darken = 0) +
geom_path(aes(x = long, y = lat), data = walk, size = 1, color = "#D55E00") +
geom_path(aes(x = long, y = lat), data = search, size = 1, color = "#CC79A7")
ggmap(get_googlemap(center = c(-117.3262, max(walk$lat)-.0002),
color = "color", scale = 2, zoom = 18, maptype = "roadmap",
style = c(feature = "all", element = "labels", visibility = "off")), darken = 0) +
geom_path(aes(x = long, y = lat), data = walk, size = 1, color = "#D55E00") +
geom_path(aes(x = long, y = lat), data = search, size = 1, color =  "#0072B2")
ggmap(get_googlemap(center = c(-117.3262, max(walk$lat)-.0002),
color = "bw", scale = 2, zoom = 18, maptype = "roadmap",
style = c(feature = "all", element = "labels", visibility = "off")), darken = 0) +
geom_path(aes(x = long, y = lat), data = walk, size = 1, color = "#D55E00") +
geom_path(aes(x = long, y = lat), data = search, size = 1, color =  "#0072B2")
ggsave("gps.pdf", units = "in", width = 5, height = 4)
library(multcomp)
library(emmeans)
library(tidyverse)
library(effects)
library(lme4)
library(lmerTest)
library(gridExtra)
library(rcompanion)
library(psych)
library(ggforce)
library(interactions)
setwd("~/Documents/Github/lss")
cbp1 <- c("#999999", "#E69F00", "#56B4E9", "#009E73",
"#F0E442", "#0072B2", "#D55E00", "#CC79A7")
theme_update(text = element_text(size = 18),
axis.text.x = element_text(size = 18, color = "black"), axis.title.x = element_text(size = 21, margin = margin(t = 0, r = 0, b = 10, l = 0)),
axis.text.y = element_text(size = 18,  color = "black"), axis.title.y = element_text(size = 21, margin = margin(t = 0, r = 10, b = 0, l = 0)),
panel.background = element_blank(),panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "white"),
axis.ticks.length = unit(.25, "cm"), axis.ticks = element_line(size = 1, lineend = "round"),
legend.key = element_rect(fill = "white"))
# CREATE DATA SET ---------------------------------------------------------------
ds <- read_csv("summary_stats_peaks.csv", na = "NaN")
ds <- filter(ds, ds$opp == 0)
ds <- mutate(ds, id = factor(id))
ds$task <- factor(ds$cond, levels = c("Walk","Search"))
ds$bin[ds$bin > 7] <- 7
#ds$bin <- factor(ds$bin, levels = c(0,1,2,3,4,5,6,7,8,9,10,11), labels = c("0-10","10-20","20-30","30-40","40-50","50-60","60-70","70-80","80-90","90-100","100-110","110+"))
ds$bin <- factor(ds$bin, levels = c(0,1,2,3,4,5,6,7), labels = c("10","20","30","40","50","60","70","80+"))
ds$eye_prop <- abs(ds$eye_prop)
ds$head_prop <- abs(ds$head_prop)
ds$eye <- abs(ds$eye)
ds$head <- abs(ds$head)
# Head contribution --------------
#AVERAGING BY SAMPLE, USING SHIFT BINS
ds %>% group_by(task,id, bin) %>%
summarise(head_prop = mean(head_prop), na.rm = T) %>%
lmer(head_prop ~ bin*task + (1|id), data = .) -> res
summary(res)
anova(res)
emmeans(res, pairwise~task|bin,adjust = "Holm")
contrast(emmeans(res, ~bin|task), "consec",adjust = "Holm")
contrast(emmeans(res, ~bin|task), "poly")
contrast(emmeans(res, ~bin*task), "poly")
ds %>% group_by(task, bin) %>%
summarise(eye = mean(abs(eye_prop), na.rm = T), n = n(), se_eye = sd(abs(eye_prop), na.rm = T)/sqrt(n), ymin_eye = eye - se_eye, ymax_eye = eye + se_eye, head = mean(abs(head_prop), na.rm = T), se_head = sd(abs(head_prop), na.rm = T)/sqrt(n), ymin_head = head - se_head, ymax_head = head + se_head) %>%
ggplot(aes(x = bin, color = task, y = head, ymin = ymin_head, ymax = ymax_head)) +
labs(x = "Total gaze shift (ยบ)", y = "Head contribution to gaze shift (prop.)") + #facet_wrap(~ task) +
#geom_pointrange(aes(x = bin, color = task, y = eye, ymin = ymin_eye, ymax = ymax_eye), size =1, position = position_dodge(.6)) +
geom_pointrange(size =1, shape = 22, fill = "white", na.rm = T) +
scale_color_manual(values = cbp1[c(7,6)], name = "Task") + #geom_smooth(method = "loess", na.rm = T) +
theme(legend.position = "bottom") +
ylim(c(.4,.7))
ggsave("figures/head_prop.pdf", units = "in", width = 10, height = 4)
ds %>% group_by(task, bin) %>%
summarise(eye = mean(abs(eye_prop), na.rm = T), n = n(), se_eye = sd(abs(eye_prop), na.rm = T)/sqrt(n), ymin_eye = eye - se_eye, ymax_eye = eye + se_eye, head = mean(abs(head_prop), na.rm = T), se_head = sd(abs(head_prop), na.rm = T)/sqrt(n), ymin_head = head - se_head, ymax_head = head + se_head) %>%
ggplot(aes(x = bin, color = task, y = head, ymin = ymin_head, ymax = ymax_head)) +
labs(x = "Total gaze shift (ยบ)", y = "Head contribution (prop.)") + #facet_wrap(~ task) +
#geom_pointrange(aes(x = bin, color = task, y = eye, ymin = ymin_eye, ymax = ymax_eye), size =1, position = position_dodge(.6)) +
geom_pointrange(size =2, shape = 22, fill = "white", na.rm = T) +
scale_color_manual(values = cbp1[c(7,6)], name = "Task") + #geom_smooth(method = "loess", na.rm = T) +
theme(legend.position = "bottom") +
ylim(c(.4,.7))
ds %>% group_by(task, bin) %>%
summarise(eye = mean(abs(eye_prop), na.rm = T), n = n(), se_eye = sd(abs(eye_prop), na.rm = T)/sqrt(n), ymin_eye = eye - se_eye, ymax_eye = eye + se_eye, head = mean(abs(head_prop), na.rm = T), se_head = sd(abs(head_prop), na.rm = T)/sqrt(n), ymin_head = head - se_head, ymax_head = head + se_head) %>%
ggplot(aes(x = bin, color = task, y = head, ymin = ymin_head, ymax = ymax_head)) +
labs(x = "Total gaze shift (ยบ)", y = "Head contribution (prop.)") + #facet_wrap(~ task) +
#geom_pointrange(aes(x = bin, color = task, y = eye, ymin = ymin_eye, ymax = ymax_eye), size =1, position = position_dodge(.6)) +
geom_pointrange(size =2, shape = 22, fill = "", na.rm = T) +
scale_color_manual(values = cbp1[c(7,6)], name = "Task") + #geom_smooth(method = "loess", na.rm = T) +
theme(legend.position = "bottom") +
ylim(c(.4,.7))
ds %>% group_by(task, bin) %>%
summarise(eye = mean(abs(eye_prop), na.rm = T), n = n(), se_eye = sd(abs(eye_prop), na.rm = T)/sqrt(n), ymin_eye = eye - se_eye, ymax_eye = eye + se_eye, head = mean(abs(head_prop), na.rm = T), se_head = sd(abs(head_prop), na.rm = T)/sqrt(n), ymin_head = head - se_head, ymax_head = head + se_head) %>%
ggplot(aes(x = bin, color = task, y = head, ymin = ymin_head, ymax = ymax_head)) +
labs(x = "Total gaze shift (ยบ)", y = "Head contribution (prop.)") + #facet_wrap(~ task) +
#geom_pointrange(aes(x = bin, color = task, y = eye, ymin = ymin_eye, ymax = ymax_eye), size =1, position = position_dodge(.6)) +
geom_pointrange(size =2, shape = 22, fill = NA, na.rm = T) +
scale_color_manual(values = cbp1[c(7,6)], name = "Task") + #geom_smooth(method = "loess", na.rm = T) +
theme(legend.position = "bottom") +
ylim(c(.4,.7))
ds %>% group_by(task, bin) %>%
summarise(eye = mean(abs(eye_prop), na.rm = T), n = n(), se_eye = sd(abs(eye_prop), na.rm = T)/sqrt(n), ymin_eye = eye - se_eye, ymax_eye = eye + se_eye, head = mean(abs(head_prop), na.rm = T), se_head = sd(abs(head_prop), na.rm = T)/sqrt(n), ymin_head = head - se_head, ymax_head = head + se_head) %>%
ggplot(aes(x = bin, color = task, y = head, ymin = ymin_head, ymax = ymax_head)) +
labs(x = "Total gaze shift (ยบ)", y = "Head contribution (prop.)") + #facet_wrap(~ task) +
#geom_pointrange(aes(x = bin, color = task, y = eye, ymin = ymin_eye, ymax = ymax_eye), size =1, position = position_dodge(.6)) +
geom_pointrange(size =2, shape = 22, fill = NA, na.rm = T) +
scale_color_manual(values = cbp1[c(7,6)], name = "Task") + #geom_smooth(method = "loess", na.rm = T) +
theme(legend.position = "bottom") +
ylim(c(.3,.7))
ggsave("figures/head_prop.pdf", units = "in", width = 6, height = 4)
ds %>% group_by(task, bin) %>%
summarise(eye = mean(abs(eye_prop), na.rm = T), n = n(), se_eye = sd(abs(eye_prop), na.rm = T)/sqrt(n), ymin_eye = eye - se_eye, ymax_eye = eye + se_eye, head = mean(abs(head_prop), na.rm = T), se_head = sd(abs(head_prop), na.rm = T)/sqrt(n), ymin_head = head - se_head, ymax_head = head + se_head) %>%
ggplot(aes(x = bin, color = task, y = head, ymin = ymin_head, ymax = ymax_head)) +
labs(x = "Total gaze shift (ยบ)", y = "Head contribution (prop.)") + #facet_wrap(~ task) +
#geom_pointrange(aes(x = bin, color = task, y = eye, ymin = ymin_eye, ymax = ymax_eye), size =1, position = position_dodge(.6)) +
geom_pointrange(size =1.5, shape = 22, fill = NA, na.rm = T) +
scale_color_manual(values = cbp1[c(7,6)], name = "Task") + #geom_smooth(method = "loess", na.rm = T) +
theme(legend.position = "bottom") +
ylim(c(.3,.7))
ds %>% group_by(task, bin) %>%
summarise(eye = mean(abs(eye_prop), na.rm = T), n = n(), se_eye = sd(abs(eye_prop), na.rm = T)/sqrt(n), ymin_eye = eye - se_eye, ymax_eye = eye + se_eye, head = mean(abs(head_prop), na.rm = T), se_head = sd(abs(head_prop), na.rm = T)/sqrt(n), ymin_head = head - se_head, ymax_head = head + se_head) %>%
ggplot(aes(x = bin, color = task, y = head, ymin = ymin_head, ymax = ymax_head)) +
labs(x = "Total gaze shift (ยบ)", y = "Head contribution (prop.)") + #facet_wrap(~ task) +
#geom_pointrange(aes(x = bin, color = task, y = eye, ymin = ymin_eye, ymax = ymax_eye), size =1, position = position_dodge(.6)) +
geom_pointrange(size =1.25, shape = 22, fill = NA, na.rm = T) +
scale_color_manual(values = cbp1[c(7,6)], name = "Task") + #geom_smooth(method = "loess", na.rm = T) +
theme(legend.position = "bottom") +
ylim(c(.3,.7))
ggsave("figures/head_prop.pdf", units = "in", width = 6, height = 4)
ggsave("figures/head_prop.pdf", units = "in", width = 5, height = 4)
install.packages("patchwork")
library(multcomp)
library(lsmeans)
library(tidyverse)
library(effects)
library(lme4)
library(lmerTest)
library(gridExtra)
library(rcompanion)
library(psych)
library(ggforce)
library(patchwork)
cbp1 <- c("#999999", "#E69F00", "#56B4E9", "#009E73",
"#F0E442", "#0072B2", "#D55E00", "#CC79A7")
theme_update(text = element_text(size = 18),
axis.text.x = element_text(size = 18, color = "black"), axis.title.x = element_text(size = 21, margin = margin(t = 0, r = 0, b = 10, l = 0)),
axis.text.y = element_text(size = 18,  color = "black"), axis.title.y = element_text(size = 21, margin = margin(t = 0, r = 10, b = 0, l = 0)),
panel.background = element_blank(),panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "white"),
axis.ticks.length = unit(.25, "cm"), axis.ticks = element_line(size = 1, lineend = "round"),
legend.key = element_rect(fill = "white"))
# CREATE DATA SET ---------------------------------------------------------------
ds <- read_csv("summary_stats_LSS1.csv", na = "NaN")
ds <- mutate(ds, id = factor(id))
#ds <- filter(ds, id != 212 & id != 203)
ds[ds["id"] == 13, "search_eyex_speed"] <- NA
View(ds)
ds[ds["id"] == 13, "search_eyex_speed"] <- NA
# POSITION SD MEANS --------------
dsl <-  gather(ds, key = "cond", value = "std", "walk_eyex_std","search_eyex_std","walk_eyey_std","search_eyey_std")
dsl$dim <- factor(ifelse(is.na(str_extract(dsl$cond,"x")),"y","x"))
dsl$task <- factor(ifelse(is.na(str_extract(dsl$cond,"walk")),"search","walk"),levels = c("walk","search"),labels = c("Walk","Search"))
dsl %>% split(.$dim) %>%
map(~ lmer(std ~ task + (1|id),data = .)) %>%
map(anova)
t.test(ds$walk_eyex_std, ds$search_eyex_std, paired = T)
library(multcomp)
library(lsmeans)
library(tidyverse)
library(effects)
library(lme4)
library(lmerTest)
library(rstatix)
library(rcompanion)
library(psych)
library(ggforce)
library(patchwork)
cbp1 <- c("#999999", "#E69F00", "#56B4E9", "#009E73",
"#F0E442", "#0072B2", "#D55E00", "#CC79A7")
theme_update(text = element_text(size = 18),
axis.text.x = element_text(size = 18, color = "black"), axis.title.x = element_text(size = 21, margin = margin(t = 0, r = 0, b = 10, l = 0)),
axis.text.y = element_text(size = 18,  color = "black"), axis.title.y = element_text(size = 21, margin = margin(t = 0, r = 10, b = 0, l = 0)),
panel.background = element_blank(),panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "white"),
axis.ticks.length = unit(.25, "cm"), axis.ticks = element_line(size = 1, lineend = "round"),
legend.key = element_rect(fill = "white"))
# CREATE DATA SET ---------------------------------------------------------------
ds <- read_csv("summary_stats_LSS1.csv", na = "NaN")
ds <- mutate(ds, id = factor(id))
#ds <- filter(ds, id != 212 & id != 203)
ds[ds["id"] == 13, "search_eyex_speed"] <- NA
# POSITION SD MEANS --------------
dsl <-  gather(ds, key = "cond", value = "std", "walk_eyex_std","search_eyex_std","walk_eyey_std","search_eyey_std")
dsl$dim <- factor(ifelse(is.na(str_extract(dsl$cond,"x")),"y","x"))
dsl$task <- factor(ifelse(is.na(str_extract(dsl$cond,"walk")),"search","walk"),levels = c("walk","search"),labels = c("Walk","Search"))
dsl %>% filter(dim == "x") %>% group_by(task) %>% get_summary_stats(std, type = "mean_sd")
dsl %>% filter(dim == "x") %>% t_test(std ~ task, paired = TRUE, var.equal = T, detailed = T) %>% add_significance()
dsl %>% filter(dim == "x") %>% cohens_d(std ~ task, paired = TRUE)
library(rstatix)
install.packages("rstatix")
library(multcomp)
library(lsmeans)
library(tidyverse)
library(effects)
library(lme4)
library(lmerTest)
library(rstatix)
library(rcompanion)
library(psych)
library(ggforce)
library(patchwork)
cbp1 <- c("#999999", "#E69F00", "#56B4E9", "#009E73",
"#F0E442", "#0072B2", "#D55E00", "#CC79A7")
theme_update(text = element_text(size = 18),
axis.text.x = element_text(size = 18, color = "black"), axis.title.x = element_text(size = 21, margin = margin(t = 0, r = 0, b = 10, l = 0)),
axis.text.y = element_text(size = 18,  color = "black"), axis.title.y = element_text(size = 21, margin = margin(t = 0, r = 10, b = 0, l = 0)),
panel.background = element_blank(),panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "white"),
axis.ticks.length = unit(.25, "cm"), axis.ticks = element_line(size = 1, lineend = "round"),
legend.key = element_rect(fill = "white"))
# CREATE DATA SET ---------------------------------------------------------------
ds <- read_csv("summary_stats_LSS1.csv", na = "NaN")
ds <- mutate(ds, id = factor(id))
#ds <- filter(ds, id != 212 & id != 203)
ds[ds["id"] == 13, "search_eyex_speed"] <- NA
# POSITION SD MEANS --------------
dsl <-  gather(ds, key = "cond", value = "std", "walk_eyex_std","search_eyex_std","walk_eyey_std","search_eyey_std")
dsl$dim <- factor(ifelse(is.na(str_extract(dsl$cond,"x")),"y","x"))
dsl$task <- factor(ifelse(is.na(str_extract(dsl$cond,"walk")),"search","walk"),levels = c("walk","search"),labels = c("Walk","Search"))
dsl %>% filter(dim == "x") %>% group_by(task) %>% get_summary_stats(std, type = "mean_sd")
dsl %>% filter(dim == "x") %>% t_test(std ~ task, paired = TRUE, var.equal = T, detailed = T) %>% add_significance()
dsl %>% filter(dim == "x") %>% cohens_d(std ~ task, paired = TRUE)
dsl %>% group_by(dim, task) %>% filter(dim == "x") %>%
summarise(stdev = mean(std, na.rm = T), n = n(), se = sd(std, na.rm = T)/sqrt(n), ymin = stdev - se, ymax = stdev + se) %>%
ggplot() +
labs(x = "", y = "Position SD (ยบ)") +
geom_sina(data = filter(dsl, dim == "x"), aes(y = std, x = task, color = task), maxwidth = .5, position = position_dodge(.6), alpha = .5, size = 3) +
geom_errorbar(aes(x = task, group = task,ymin = ymin, ymax = ymax), size =1, width = .3, position = position_dodge(.6)) +
scale_color_manual(values = cbp1[c(7,6)], name = "Task") +
scale_y_continuous(breaks = c(0,10,20,30,40), limits = c(0,40))
ds <- filter(ds, id != 35)
ds[ds["id"] == 13, "search_eyex_speed"] <- NA
# POSITION SD MEANS --------------
dsl <-  gather(ds, key = "cond", value = "std", "walk_eyex_std","search_eyex_std","walk_eyey_std","search_eyey_std")
dsl$dim <- factor(ifelse(is.na(str_extract(dsl$cond,"x")),"y","x"))
dsl$task <- factor(ifelse(is.na(str_extract(dsl$cond,"walk")),"search","walk"),levels = c("walk","search"),labels = c("Walk","Search"))
dsl %>% filter(dim == "x") %>% group_by(task) %>% get_summary_stats(std, type = "mean_sd")
dsl %>% filter(dim == "x") %>% t_test(std ~ task, paired = TRUE, var.equal = T, detailed = T) %>% add_significance()
dsl %>% filter(dim == "x") %>% cohens_d(std ~ task, paired = TRUE)
dsl %>% group_by(dim, task) %>% filter(dim == "x") %>%
summarise(stdev = mean(std, na.rm = T), n = n(), se = sd(std, na.rm = T)/sqrt(n), ymin = stdev - se, ymax = stdev + se) %>%
ggplot() +
labs(x = "", y = "Position SD (ยบ)") +
geom_sina(data = filter(dsl, dim == "x"), aes(y = std, x = task, color = task), maxwidth = .5, position = position_dodge(.6), alpha = .5, size = 3) +
geom_errorbar(aes(x = task, group = task,ymin = ymin, ymax = ymax), size =1, width = .3, position = position_dodge(.6)) +
scale_color_manual(values = cbp1[c(7,6)], name = "Task") +
scale_y_continuous(breaks = c(0,10,20,30,40), limits = c(0,40))
dsl <-  gather(ds, key = "cond", value = "speed", "walk_eyex_speed","search_eyex_speed","walk_eyey_speed","search_eyey_speed")
dsl$dim <- factor(ifelse(is.na(str_extract(dsl$cond,"x")),"y","x"))
dsl$task <- factor(ifelse(is.na(str_extract(dsl$cond,"walk")),"search","walk"),levels = c("walk","search"),labels = c("Walk","Search"))
shapiro_test(ds$walk_eyex_speed - ds$search_eyex_speed)
dsl %>% filter(dim == "x") %>% group_by(task) %>% get_summary_stats(speed, type = "mean_sd")
dsl %>% filter(dim == "x") %>% t_test(speed ~ task, paired = TRUE) %>% add_significance()
dsl %>% filter(dim == "x") %>% cohens_d(speed ~ task, paired = TRUE)
ds <- read_csv("summary_stats_LSS1.csv", na = "NaN")
ds <- mutate(ds, id = factor(id))
#ds <- filter(ds, id != 35) #Bad posttest eye tracking accuracy
ds[ds["id"] == 13, "search_eyex_speed"] <- NA
dsl <-  gather(ds, key = "cond", value = "speed", "walk_eyex_speed","search_eyex_speed","walk_eyey_speed","search_eyey_speed")
dsl$dim <- factor(ifelse(is.na(str_extract(dsl$cond,"x")),"y","x"))
dsl$task <- factor(ifelse(is.na(str_extract(dsl$cond,"walk")),"search","walk"),levels = c("walk","search"),labels = c("Walk","Search"))
shapiro_test(ds$walk_eyex_speed - ds$search_eyex_speed)
dsl %>% filter(dim == "x") %>% group_by(task) %>% get_summary_stats(speed, type = "mean_sd")
dsl %>% filter(dim == "x") %>% t_test(speed ~ task, paired = TRUE) %>% add_significance()
dsl %>% filter(dim == "x") %>% cohens_d(speed ~ task, paired = TRUE)
library(multcomp)
library(lsmeans)
library(tidyverse)
library(effects)
library(lme4)
library(lmerTest)
library(rstatix)
library(rcompanion)
library(psych)
library(ggforce)
library(patchwork)
cbp1 <- c("#999999", "#E69F00", "#56B4E9", "#009E73",
"#F0E442", "#0072B2", "#D55E00", "#CC79A7")
theme_update(text = element_text(size = 18),
axis.text.x = element_text(size = 18, color = "black"), axis.title.x = element_text(size = 21, margin = margin(t = 0, r = 0, b = 10, l = 0)),
axis.text.y = element_text(size = 18,  color = "black"), axis.title.y = element_text(size = 21, margin = margin(t = 0, r = 10, b = 0, l = 0)),
panel.background = element_blank(),panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "white"),
axis.ticks.length = unit(.25, "cm"), axis.ticks = element_line(size = 1, lineend = "round"),
legend.key = element_rect(fill = "white"))
# CREATE DATA SET ---------------------------------------------------------------
ds <- read_csv("summary_stats_LSS1.csv", na = "NaN")
ds <- mutate(ds, id = factor(id))
#ds <- filter(ds, id != 35) #Bad posttest eye tracking accuracy
ds[ds["id"] == 13, "search_eyex_speed"] <- NA
# POSITION SD MEANS --------------
dsl <-  gather(ds, key = "cond", value = "std", "walk_eyex_std","search_eyex_std","walk_eyey_std","search_eyey_std")
dsl$dim <- factor(ifelse(is.na(str_extract(dsl$cond,"x")),"y","x"))
dsl$task <- factor(ifelse(is.na(str_extract(dsl$cond,"walk")),"search","walk"),levels = c("walk","search"),labels = c("Walk","Search"))
dsl %>% filter(dim == "x") %>% group_by(task) %>% get_summary_stats(std, type = "mean_sd")
dsl %>% filter(dim == "x") %>% t_test(std ~ task, paired = TRUE, var.equal = T, detailed = T) %>% add_significance()
dsl %>% filter(dim == "x") %>% cohens_d(std ~ task, paired = TRUE)
dsl %>% group_by(dim, task) %>% filter(dim == "x") %>%
summarise(stdev = mean(std, na.rm = T), n = n(), se = sd(std, na.rm = T)/sqrt(n), ymin = stdev - se, ymax = stdev + se) %>%
ggplot() +
labs(x = "", y = "Position SD (ยบ)") +
geom_sina(data = filter(dsl, dim == "x"), aes(y = std, x = task, color = task), maxwidth = .5, position = position_dodge(.6), alpha = .5, size = 3) +
geom_errorbar(aes(x = task, group = task,ymin = ymin, ymax = ymax), size =1, width = .3, position = position_dodge(.6)) +
scale_color_manual(values = cbp1[c(7,6)], name = "Task") +
scale_y_continuous(breaks = c(0,10,20,30,40), limits = c(0,40))
dsl %>% filter(dim == "x") %>% group_by(task) %>% get_summary_stats(std, type = "mean_sd")
View(ds)
ds$id
pkgs <- c("multcomp", "emmeans", "tidyverse", "effects", "lme4", "lmerTest", "psych","ggforce","patchwork", "rstatix")
#lapply(pkgs[!(pkgs %in% installed.packages())], install.packages)
lapply(pkgs, library, character.only = TRUE)
cbp1 <- c("#999999", "#E69F00", "#56B4E9", "#009E73","#F0E442", "#0072B2", "#D55E00", "#CC79A7")
theme_update(text = element_text(size = 18),
axis.text.x = element_text(size = 18, color = "black"), axis.title.x = element_text(size = 21, margin = margin(t = 0, r = 0, b = 10, l = 0)),
axis.text.y = element_text(size = 18,  color = "black"), axis.title.y = element_text(size = 21, margin = margin(t = 0, r = 10, b = 0, l = 0)),
panel.background = element_blank(),panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "white"),
axis.ticks.length = unit(.25, "cm"), axis.ticks = element_line(size = 1, lineend = "round"),
legend.key = element_rect(fill = "white"))
# CREATE DATA SET ---------------------------------------------------------------
ds <- read_csv("summary_stats_mot_corrected.csv", na = "NaN")
ds <- mutate(ds, id = factor(id))
ds <- filter(ds, id != 212 & id != 203)
ds[ds["id"] == 229, "walk_posy_speed"] <- NA
# POSITION SD MEANS --------------
dsl <-  gather(ds, key = "cond", value = "std", "walk_posx_std","search_posx_std","walk_posy_std","search_posy_std","walk_eyex_std","search_eyex_std","walk_eyey_std","search_eyey_std")
dsl$eyehead <- factor(ifelse(is.na(str_extract(dsl$cond,"eye")),"head","eye"), levels = c("eye","head"),labels = c("Eyes","Head"))
dsl$dim <- factor(ifelse(is.na(str_extract(dsl$cond,"x")),"y","x"))
dsl$task <- factor(ifelse(is.na(str_extract(dsl$cond,"walk")),"search","walk"), levels = c("walk","search"),labels = c("Walk","Search"))
dsl %>% split(.$dim) %>%
map(~ lmer(std ~ eyehead*task + (1|id),data = .)) -> res
res %>% map(anova)
res %>% map(~ emmeans(.,pairwise~eyehead|task, adjust = "Holm"))
res %>% map(~ emmeans(.,pairwise~task|eyehead, adjust = "Holm"))
#Descriptives
dsl %>% group_by(dim, eyehead, task) %>% filter(dim == "x") %>%
summarise(spread = mean(std, na.rm = T), n = n(), SD = sd(std, na.rm = T))
